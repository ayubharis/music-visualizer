{"version":3,"sources":["components/Visualizer.js","components/BgChoice.js","components/ControlPanel.js","components/Bars/Bar.js","components/AudioPlayer.js","components/LandingPage.js","App.js","index.js"],"names":["songInterval","BgChoice","className","this","props","num","active","onClick","changeBackground","React","Component","ControlPanel","handleChange","e","setState","colorToggle","state","upload","document","getElementById","files","fileName","name","innerHTML","replace","playing","stopSong","setTimeout","removeStop","confirm","length","uploadSong","toggleVisible","enableShaking","checked","enableColors","enableLowerBars","enableRemoveBars","enableGradient","enableSecondary","alert","controlPanelVisible","settings","infinite","speed","slidesToShow","slidesToScroll","epilepsy","class","visible","id","type","accept","onChange","for","icon","faUpload","Array","fill","map","i","Bar","getColors","colorsEnabled","gradientEnabled","factor","totalVolume","getHeight","removeCenter","index","height","lowerBars","style","transition","backgroundColor","AudioPlayer","positionHandle","position","timeline","handle","timelineWidth","offsetWidth","handleLeft","offsetLeft","marginLeft","mouseMove","pageX","audio","currentTime","duration","play","window","addEventListener","mouseUp","removeEventListener","mouseDown","pause","lastTimeUpdate","Date","now","lasteTimeUpdate","ratio","timeLeft","Math","round","seconds","minutes","faPause","faPlay","onMouseUp","onMouseDown","ref","toString","padStart","Visualizer","updateDA","song","ended","songEnded","clearInterval","stop","endSong","sumOfFreqs","analyser","dataArr","dataArray","getByteFrequencyData","setShaking","subarray","reduce","total","next","volume","file","Audio","URL","createObjectURL","audioCtx","AudioContext","analyserNode","createAnalyser","audioSourceNode","createMediaElementSource","connect","fftSize","destination","Uint8Array","frequencyBinCount","shake","songfile","setInterval","originalIndex","secondary","floor","pow","freqList","LandingPage","bg","uploaded","toggle","shakeEnabled","colors","removeBars","gradient","isShaking","display","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.87269499.chunk.js","sourcesContent":["import React from 'react';\r\nimport Bar from './Bars/Bar.js';\r\nimport AudioPlayer from './AudioPlayer.js';\r\nimport '../css/Visualizer.css';\r\n\r\n/* This component handles all the logic and rendering of the bars */\r\n\r\n// This will be used as the interval that runs every 25 milliseconds to update the bars\r\nvar songInterval;\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const file = document.getElementById(\"file\").files[0];\r\n        const song = new Audio(URL.createObjectURL(file));\r\n        const audioCtx = new AudioContext();\r\n        const analyserNode = audioCtx.createAnalyser();\r\n        const audioSourceNode = audioCtx.createMediaElementSource(song);\r\n        song.volume = 0.2;\r\n        song.play();\r\n        audioSourceNode.connect(analyserNode);\r\n        analyserNode.fftSize = 2048;\r\n        analyserNode.connect(audioCtx.destination);\r\n        const dataArr = new Uint8Array(analyserNode.frequencyBinCount);\r\n        // Initialize all audio tools and data\r\n        this.state = {\r\n            analyser: analyserNode,\r\n            dataArray: dataArr,\r\n            shake: false,\r\n            song: song,\r\n            songfile: file,\r\n            volume: 0,\r\n        }\r\n    }\r\n\r\n    // This function runs every 25 milliseconds. It pulls the current audio data, and stores it in state for rendering\r\n    updateDA = () => {\r\n        // When the song has ended, stop running this function every 25 ms\r\n        if (this.state.song.ended) {\r\n            this.props.songEnded();\r\n            window.clearInterval(songInterval);\r\n        }\r\n        if (this.props.stop) this.endSong();\r\n        let sumOfFreqs = 0;\r\n        let analyser = this.state.analyser;\r\n        let dataArr = this.state.dataArray;\r\n        analyser.getByteFrequencyData(dataArr);\r\n        // Used to get overall volume at a given moment\r\n        for (let i = 1; i <= 32; i++) {\r\n            sumOfFreqs += dataArr[i * 12];\r\n        }\r\n        // Logic used to shake the screen, if the setting is enabled\r\n        this.props.setShaking(dataArr.subarray(4, 8).reduce((total, next) => total += next) / 4 > 240);\r\n        // Update data, prepare for render\r\n        this.setState({\r\n            analyser: analyser,\r\n            dataArray: dataArr,\r\n            volume: sumOfFreqs / 3840,\r\n            sumOfFreqs: sumOfFreqs,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Set the 25 ms interval\r\n        if (!this.state.song.ended) {\r\n            songInterval = setInterval(this.updateDA, 25);\r\n        }\r\n    }\r\n\r\n    // Used to force end a song, if a new file is uploaded\r\n    endSong() {\r\n        let song = this.state.song;\r\n        song.currentTime = song.duration;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"visualizer\">\r\n                {/* This is the playblack controls - active when control panel is visible */}\r\n                <div className={!this.props.controlPanelVisible ? \"d-none\" : \"\"}> <AudioPlayer audio={this.state.song} /></div>\r\n                <div className=\"bars\">\r\n                    <div className=\"hidden-bar\"></div>\r\n                    {[...Array(33)].map((e, i) => {\r\n                        // Custom algorithms to render bar heights based off of extracted frequency data\r\n                        let originalIndex = i;\r\n                        i = i > 16 ? i - 2 * (i % 16) : i + 1; \r\n                        if (!this.props.secondary) {\r\n                            return <Bar height={\r\n                                this.state.dataArray.subarray(Math.floor(i * i / 2), Math.floor(i * i / 2) + 4).reduce((total, next) => \r\n                                total += next) * Math.pow(this.state.volume, 2.5) / 19.2} colorsEnabled={this.props.colorsEnabled}\r\n                                totalVolume={this.state.volume} index={originalIndex} removeCenter={this.props.removeCenter}\r\n                                gradientEnabled={this.props.gradientEnabled} lowerBars={this.props.lowerBars} i={i}/>\r\n                        }\r\n                        let freqList = [];\r\n                        i = i === 17 ? 16 : i;\r\n                        freqList = [1, 3, 5, 7, 10, 13, 21, 29, 46, 63, 96, 134, 212, 290, 380, 465, 576, 632, 690];\r\n                        return <Bar height={(this.props.lowerBars ? 0.65 : 1) *\r\n                            this.state.dataArray.subarray(freqList[i],freqList[i+1]).reduce((total, next) => \r\n                            total += next)/((freqList[i+1]-freqList[i])*2.75)} colorsEnabled={this.props.colorsEnabled}\r\n                            totalVolume={this.state.volume / 2 + this.state.sumOfFreqs / 16320} i={i}\r\n                            index={originalIndex} removeCenter={this.props.removeCenter}\r\n                            gradientEnabled={this.props.gradientEnabled} lowerBars={this.props.lowerBars}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../css/BgChoice.css'\r\nimport '../css/LandingPage.css'\r\n\r\n/* \r\nThis component renders the background choices on the control panel\r\nOriginally, there was to be 9 backgrounds. However, providing GIFs of \r\nhigh quality takes up alot of space, so it had to be lowered to 3\r\n*/\r\n\r\n\r\nexport default class BgChoice extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={`choice bg${this.props.num} ${this.props.active === this.props.num ? \"active\" : \"\"}`}\r\n            onClick={() => this.props.changeBackground(this.props.num)}> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Slider from 'react-slick';\r\nimport BgChoice from './BgChoice.js';\r\nimport '../css/ControlPanel.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\r\n\r\n/* This component renders the control panel that the user can interact with */\r\n\r\nexport default class ControlPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            controlPanelVisible: false,\r\n            playing: false,\r\n            colorToggle: false,\r\n        }\r\n    }\r\n\r\n    // Used for the epilepsy warning\r\n    handleChange = e => {\r\n        this.setState({colorToggle: !this.state.colorToggle});\r\n    }\r\n\r\n    // Called whenever a file is uploaded\r\n    upload = () => {\r\n        if (document.getElementById(\"file\").files[0]) {\r\n            let fileName = document.getElementById(\"file\").files[0].name;\r\n            document.getElementById(\"file-name\").innerHTML = fileName.replace(/\\.[^/.]+$/, \"\");\r\n            // If a song is currently playing, this will stop the song\r\n            if (this.state.playing) {\r\n                this.setState({\r\n                    playing: false,\r\n                })\r\n                this.props.stopSong();\r\n                setTimeout(() => {\r\n                    this.props.removeStop();\r\n                }, 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Called whenever the \"confirm\" button is pressed\r\n    confirm = () => {\r\n        // If the user uploaded a file or a song is already playing\r\n        if (document.getElementById(\"file\").files.length >= 1 || this.state.playing) {\r\n            this.props.uploadSong();\r\n            // Makes the control panel go away\r\n            this.props.toggleVisible();\r\n            this.setState({\r\n                playing: true\r\n            });\r\n            // Set settings\r\n            this.props.enableShaking(document.getElementById(\"shakeSwitch\").checked);\r\n            this.props.enableColors(document.getElementById(\"colorSwitch\").checked);\r\n            this.props.enableLowerBars(document.getElementById(\"lowerBarSwitch\").checked);\r\n            this.props.enableRemoveBars(document.getElementById(\"removeBarsSwitch\").checked);\r\n            this.props.enableGradient(document.getElementById(\"gradientSwitch\").checked);\r\n            this.props.enableSecondary(document.getElementById(\"secondarySwitch\").checked);\r\n        } else {\r\n            alert(\"No file uploaded\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // For the carousel of background choices\r\n        const settings = {\r\n            infinite: true,\r\n            speed: 1000,\r\n            slidesToShow: 3,\r\n            slidesToScroll: 3,\r\n        };\r\n        let epilepsy = this.state.colorToggle ? <div class=\"font-weight-bold mt-4\">EPILEPSY WARNING: ENABLING COLOR CHANGE MAY CREATE FLASHING LIGHTS</div> : null;\r\n        return (\r\n            <div className={\"control-panel \" + (!this.props.visible ? \"control-panel-hidden\" : \"\")} id=\"panel\">\r\n                <div className=\"control-panel-content\">\r\n                    <input type=\"file\" name=\"file\" id=\"file\" accept=\"audio/*\" onChange={this.upload} />\r\n                    <label className=\"upload-button\" for=\"file\"><FontAwesomeIcon icon={faUpload} /> &nbsp;&nbsp;Upload song</label>\r\n                    <div id=\"file-name\" className=\"file-name-text\">No file chosen</div>\r\n                    <div className=\"choose-background-text mt-3 mb-3 text-uppercase text-secondary\">\r\n                        choose a background\r\n                    </div>\r\n                    <div className=\"carousel mx-auto mb-4\">\r\n                        {/* Background choices */}\r\n                        <Slider {...settings}>\r\n                            {Array(4).fill(0).map((e, i) => i + 1).map(num =>\r\n                                <BgChoice num={num} active={this.props.active}\r\n                                    changeBackground={this.props.changeBackground}/>\r\n                            )}\r\n                        </Slider>\r\n                    </div>\r\n                    <div className=\"settings-text my-3 text-uppercase text-secondary\">\r\n                        settings\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col custom-control custom-switch\">\r\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"colorSwitch\" onChange={(e) => this.handleChange(e)}/>\r\n                            <label class=\"custom-control-label\" for=\"colorSwitch\">Enable color change</label>\r\n                        </div>\r\n                        <div class=\"col custom-control custom-switch\">\r\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"shakeSwitch\"/>\r\n                            <label class=\"custom-control-label\" for=\"shakeSwitch\">Enable shake</label>\r\n                        </div>\r\n                        <div class=\"col custom-control custom-switch\">\r\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"gradientSwitch\"/>\r\n                            <label class=\"custom-control-label\" for=\"gradientSwitch\">Enable color gradient</label>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row mt-3\">\r\n                        <div class=\"col custom-control custom-switch\">\r\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"removeBarsSwitch\"/>\r\n                            <label class=\"custom-control-label\" for=\"removeBarsSwitch\">Remove center bars</label>\r\n                        </div>\r\n                        <div class=\"col custom-control custom-switch\">\r\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"secondarySwitch\"/>\r\n                            <label class=\"custom-control-label\" for=\"secondarySwitch\">Different algorithm</label>\r\n                        </div>\r\n                        <div class=\"col custom-control custom-switch\">\r\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"lowerBarSwitch\"/>\r\n                            <label class=\"custom-control-label\" for=\"lowerBarSwitch\">Lower bars</label>\r\n                        </div>\r\n                    </div>\r\n                    {epilepsy}\r\n                </div>\r\n                <div className=\"control-panel-confirm\">\r\n                    <div className=\"confirm-button mt-2\" onClick={this.confirm}>{this.state.playing ? \"Confirm\" : \"Play\"}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../../css/Bars.css';\r\n\r\n/* This component renders one individual bar from the bottom of the screen */\r\n\r\nexport default class Bar extends React.Component {\r\n    // Returns color of bar depending on settings and height of bar\r\n    getColors = () => {\r\n        if (!this.props.colorsEnabled && !this.props.gradientEnabled) return \"rgba(255, 255, 255, 0.3)\";\r\n        let i = this.props.i;\r\n        if (!this.props.colorsEnabled && this.props.gradientEnabled) return `rgba(${255 * i / 17}, ${10 * (i / 7)}, ${255 * (17 - i) / 17}, 0.8)`;\r\n        let factor = (this.props.totalVolume ** 5 * 40);\r\n        let offset = 125;\r\n        if (!this.props.gradientEnabled) return `rgba(${factor * 0.3 + offset}, ${factor * 1.5 + offset}, ${factor + offset}, 0.8)`;\r\n        factor = this.props.totalVolume / 1.45;\r\n        return `rgba(${factor * 255 * i / 17}, ${factor * 10 * (i / 7)}, ${factor * 255 * (17 - i) / 17}, ${factor})`\r\n    }\r\n\r\n    // Returns height of bar, passed in through the visualizer\r\n    getHeight = () => {\r\n        if (this.props.removeCenter && this.props.index >= 12 && this.props.index <= 19) return \"0%\" // If remove center bars option is enabled\r\n        return this.props.height * (this.props.lowerBars ? 0.65 : 1) + \"%\";\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"bar\" style={{\r\n                height: this.getHeight(),\r\n                transition: \"all ms ease\", \r\n                backgroundColor: this.getColors(),\r\n            }}></div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPause } from '@fortawesome/free-solid-svg-icons'\r\nimport '../css/AudioPlayer.css';\r\n\r\n/* This component renders the playback controls when a song is playing */\r\n\r\nexport default class AudioPlayer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { playing: true };\r\n        this.lastTimeUpdate = 0;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.audio.addEventListener(\"timeupdate\", () => {\r\n            if (Date.now() - this.lastTimeUpdate < 300) return;\r\n            if (this.timeline == null) return;\r\n            this.lasteTimeUpdate = Date.now();\r\n            let ratio = this.props.audio.currentTime / this.props.audio.duration;\r\n            let position = (this.timeline.offsetWidth * ratio) + this.timeline.offsetLeft;\r\n            this.positionHandle(position);\r\n        });\r\n    };\r\n\r\n    positionHandle = (position) => {\r\n        if (this.timeline == null || this.handle == null) return;\r\n        let timelineWidth = this.timeline.offsetWidth - this.handle.offsetWidth;\r\n        let handleLeft = position - this.timeline.offsetLeft;\r\n        if (handleLeft >= 0 && handleLeft <= timelineWidth) {\r\n            this.handle.style.marginLeft = handleLeft + \"px\";\r\n        }\r\n        if (handleLeft < 0) {\r\n            this.handle.style.marginLeft = \"0px\";\r\n        }\r\n        if (handleLeft > timelineWidth) {\r\n            this.handle.style.marginLeft = timelineWidth + \"px\";\r\n        }\r\n    };\r\n\r\n    mouseMove = (e) => {\r\n        if (this.timeline == null || this.handle == null) return;\r\n        this.positionHandle(e.pageX);\r\n        this.props.audio.currentTime = ((e.pageX - this.timeline.offsetLeft) / this.timeline.offsetWidth) * this.props.audio.duration;\r\n        this.props.audio.play();\r\n        this.setState({ playing: true });\r\n        window.addEventListener('mousemove', this.mouseMove);\r\n        window.addEventListener('mouseup', this.mouseUp);\r\n    };\r\n\r\n    mouseUp = (e) => {\r\n        window.removeEventListener('mousemove', this.mouseMove);\r\n        window.removeEventListener('mouseup', this.mouseUp);\r\n    };\r\n\r\n    mouseDown = (e) => {\r\n        window.addEventListener('mousemove', this.mouseMove);\r\n        window.addEventListener('mouseup', this.mouseUp);\r\n    };\r\n\r\n    play = () => {\r\n        if (this.state.playing) {\r\n            this.setState({ playing: false });\r\n            this.props.audio.pause();\r\n        } else {\r\n            this.setState({ playing: true });\r\n            this.props.audio.play();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let timeLeft = Math.round(this.props.audio.duration - this.props.audio.currentTime);\r\n        let seconds = (timeLeft % 60);\r\n        let minutes = (timeLeft - seconds) / 60\r\n        return <div className=\"audio-player\">\r\n            <div className=\"play-pause-btn\" onClick={this.play}>{this.state.playing ? <FontAwesomeIcon icon={faPause} /> : <FontAwesomeIcon icon={faPlay} />}</div>\r\n            <div className=\"timeline\" onMouseUp={this.mouseUp} onMouseDown={this.mouseMove} ref={(timeline) => { this.timeline = timeline }}>\r\n                <div className=\"line\"></div>\r\n                <div className=\"handle\" onMouseDown={this.mouseDown} ref={(handle) => { this.handle = handle }} />\r\n            </div>\r\n            <div className=\"timeline-time\">-{minutes + \":\" + seconds.toString().padStart(2, 0)}</div>\r\n        </div>\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ControlPanel from './ControlPanel.js';\r\nimport Visualizer from './Visualizer.js';\r\nimport '../css/LandingPage.css';\r\n\r\n/* This component renders the page and maintains most state */\r\n\r\nexport default class LandingPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active: 1,\r\n            uploaded: false,\r\n            isShaking: false,\r\n            controlPanelVisible: true,\r\n            shakeEnabled: false,\r\n            colors: false,\r\n            lowerBars: false,\r\n            removeBars: false,\r\n            gradient: false,\r\n            stop: false,\r\n            secondary: false,\r\n            // Initialize custom settings, the background, and the control panel\r\n        }\r\n    }\r\n\r\n    changeBackground = bg => {\r\n        this.setState({\r\n            active: bg,\r\n        });\r\n    }\r\n\r\n    uploadSong = () => {\r\n        this.setState({\r\n            uploaded: true,\r\n        });\r\n    }\r\n\r\n    enableShaking = toggle => {\r\n        this.setState({\r\n            shakeEnabled: toggle,\r\n        })\r\n    }\r\n\r\n    songEnded = () => {\r\n        this.setState({\r\n            controlPanelVisible: true,\r\n            uploaded: false\r\n        })\r\n    }\r\n\r\n    enableColors = toggle => {\r\n        this.setState({\r\n            colors: toggle,\r\n        })\r\n    }\r\n\r\n    enableLowerBars = toggle => {\r\n        this.setState({\r\n            lowerBars: toggle,\r\n        })\r\n    }\r\n\r\n    enableRemoveBars = toggle => {\r\n        this.setState({\r\n            removeBars: toggle,\r\n        })\r\n    }\r\n\r\n    enableGradient = toggle => {\r\n        this.setState({\r\n            gradient: toggle,\r\n        })\r\n    }\r\n\r\n    enableSecondary = toggle => {\r\n        this.setState({\r\n            secondary: toggle,\r\n        })\r\n    }\r\n\r\n    // The below 2 functions are used to force stop a song when a new file is uploaded\r\n    stopSong = () => {\r\n        this.setState({\r\n            stop: true,\r\n        })\r\n    }\r\n\r\n    removeStop = () => {\r\n        this.setState({\r\n            stop: false,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // Entire screen shakes from the shake effect\r\n            <div className={`container-fluid bg${this.state.active}` + (this.state.isShaking && this.state.shakeEnabled ? \" shake\" : \"\")}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-6 mt-2\">\r\n                        <ControlPanel\r\n                            visible={this.state.controlPanelVisible}\r\n                            toggleVisible={() => this.setState({ controlPanelVisible: !this.state.controlPanelVisible })}\r\n                            changeBackground={this.changeBackground} active={this.state.active}\r\n                            uploadSong={this.uploadSong} enableShaking={this.enableShaking} enableColors={this.enableColors}\r\n                            enableLowerBars={this.enableLowerBars} enableRemoveBars={this.enableRemoveBars} enableGradient={this.enableGradient}\r\n                            stopSong={this.stopSong} removeStop={this.removeStop} enableSecondary={this.enableSecondary}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {this.state.uploaded ? <Visualizer controlPanelVisible={this.state.controlPanelVisible} setShaking={(isShaking) => this.setState({ isShaking })}\r\n                        songEnded={this.songEnded} colorsEnabled={this.state.colors} lowerBars={this.state.lowerBars} removeCenter={this.state.removeBars}\r\n                        gradientEnabled={this.state.gradient} stop={this.state.stop} secondary={this.state.secondary}/> : \"\"}\r\n                </div>\r\n                <div\r\n                    className=\"show-control-panel-button\" style={{ display: (!this.state.controlPanelVisible ? \"block\" : \"none\") }}\r\n                    onClick={() => this.setState({ controlPanelVisible: !this.state.controlPanelVisible })}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport LandingPage from './components/LandingPage.js';\r\nimport './css/App.css';\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <LandingPage/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App/>\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}